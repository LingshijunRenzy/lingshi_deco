plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "lingshi_deco.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }

    dataGen {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom implementation
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // 直接声明数据生成专用依赖
    dataGen "net.minecraftforge:forge:${forge_version}:installer@jar"

    // Architectury Transformer 需要的基础依赖
    architecturyTransformerClasspath "net.minecraftforge:forge:${forge_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

task runData(type: JavaExec) {
    group = "forge"
    dependsOn ':forge:extractData'
    classpath = configurations.dataGen + sourceSets.main.runtimeClasspath
    mainClass = "net.minecraft.data.Main"
    workingDir = file('run')
    systemProperties = [
            'forge.disableNetwork': 'true',
            'forge.enableGameTest': 'true',
            'forge.skipClientSetup': 'true'
    ]
    args = [
            '--all',
            '--client',
            '--server',
            '--dev',
            '--mod', 'lingshi_deco',
            '--output', project(':common').file('src/main/resources'),
            '--existing', file('src/generated/resources'),
            '--gameDir', workingDir,
            '--flat'
    ]
    doFirst {
        file('run').mkdirs()
        file('src/generated/resources').mkdirs()
    }
}

// 新增数据解压任务
task extractData(type: Copy) {
    from(zipTree(configurations.dataGen.singleFile)) {
        include 'data/**'
        include 'assets/**'
    }
    into file('src/generated/resources')
}
